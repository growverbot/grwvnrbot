const TelegramBot = require('node-telegram-bot-api');
const admin = require('firebase-admin');
const express = require('express');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è health-check —Å–µ—Ä–≤–µ—Ä–∞
const healthApp = express();
healthApp.get('/', (req, res) => {
  res.status(200).send('Bot is alive');
});

const HEALTH_CHECK_PORT = process.env.PORT || 3000;
healthApp.listen(HEALTH_CHECK_PORT, () => {
  console.log(`‚úÖ Health check server running on port ${HEALTH_CHECK_PORT}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

if (!process.env.FIREBASE_SERVICE_ACCOUNT) {
  console.error('‚ùå FIREBASE_SERVICE_ACCOUNT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
try {
  const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount)
  });
  console.log('‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
  process.exit(1);
}

const db = admin.firestore();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const PLANT_STAGES = {
  SEED: { name: '–°–µ–º–µ—á–∫–æ', emoji: 'üå±', minHeight: 0 },
  SPROUT: { name: '–†–æ—Å—Ç–æ–∫', emoji: 'üåø', minHeight: 5 },
  YOUNG: { name: '–ú–æ–ª–æ–¥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', emoji: 'ü™¥', minHeight: 15 },
  MATURE: { name: '–í–∑—Ä–æ—Å–ª–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', emoji: 'üå≥', minHeight: 30 },
  BLOOMING: { name: '–¶–≤–µ—Ç—É—â–µ–µ', emoji: 'üå∏', minHeight: 50 }
};

const PLANT_VARIETIES = [
  '–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ', '–ó–æ–ª–æ—Ç–æ–π –ª–∏—Å—Ç', '–ó–µ–ª–µ–Ω—ã–π –¥—Ä–∞–∫–æ–Ω', '–õ—É–Ω–Ω–∞—è –ø—ã–ª—å',
  '–ò–∑—É–º—Ä—É–¥–Ω–∞—è –º–µ—á—Ç–∞', '–°–æ–ª–Ω–µ—á–Ω—ã–π –ª—É—á', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç—É–º–∞–Ω', '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∞–¥',
  '–î–∏–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞', '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–µ—Å', '–†–∞–¥—É–∂–Ω—ã–π —Ü–≤–µ—Ç', '–ù–µ–±–µ—Å–Ω–∞—è –≤—ã—Å–æ—Ç–∞'
];

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
const mainKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üå± –ú–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', callback_data: 'my_plant' }],
      [{ text: 'üíß –ü–æ–ª–∏—Ç—å', callback_data: 'water' }, { text: 'üåø –ü–æ–¥–∫–æ—Ä–º–∏—Ç—å', callback_data: 'feed' }],
      [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞', callback_data: 'leaderboard' }],
      [{ text: 'üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' }, { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
    ]
  }
};

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏
function getPlantStage(height) {
  if (height >= PLANT_STAGES.BLOOMING.minHeight) return PLANT_STAGES.BLOOMING;
  if (height >= PLANT_STAGES.MATURE.minHeight) return PLANT_STAGES.MATURE;
  if (height >= PLANT_STAGES.YOUNG.minHeight) return PLANT_STAGES.YOUNG;
  if (height >= PLANT_STAGES.SPROUT.minHeight) return PLANT_STAGES.SPROUT;
  return PLANT_STAGES.SEED;
}

async function createUser(userId, username, chatId) {
  const variety = PLANT_VARIETIES[Math.floor(Math.random() * PLANT_VARIETIES.length)];
  const userData = {
    username: username || `–°–∞–¥–æ–≤–æ–¥${userId}`,
    joinDate: admin.firestore.Timestamp.now(),
    chatId: chatId,
    plant: {
      variety: variety,
      height: 1,
      health: 100,
      lastWatered: admin.firestore.Timestamp.now(),
      lastFed: admin.firestore.Timestamp.now(),
      plantedDate: admin.firestore.Timestamp.now(),
      waterCount: 0,
      feedCount: 0
    },
    totalGrowth: 0,
    achievements: []
  };

  await db.collection('users').doc(userId.toString()).set(userData);
  return userData;
}

async function getUser(userId) {
  const userDoc = await db.collection('users').doc(userId.toString()).get();
  return userDoc.exists ? userDoc.data() : null;
}

async function updateUser(userId, data) {
  await db.collection('users').doc(userId.toString()).update(data);
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–∏–≤–∞ –∏ –ø–æ–¥–∫–æ—Ä–º–∫–∏
async function waterPlant(userId) {
  const user = await getUser(userId);
  if (!user) return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!' };

  const now = admin.firestore.Timestamp.now();
  const lastWatered = user.plant.lastWatered.toDate();
  const timeDiff = (now.toDate() - lastWatered) / (1000 * 60 * 60);

  if (timeDiff < 4) {
    const hoursLeft = Math.ceil(4 - timeDiff);
    return { 
      success: false, 
      message: `üö´ –†–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª–∏—Ç–æ! –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ ${hoursLeft} —á.` 
    };
  }

  const growth = Math.floor(Math.random() * 3) + 1;
  const newHeight = user.plant.height + growth;
  const newHealth = Math.min(100, user.plant.health + 10);

  try {
    await db.collection('users').doc(userId.toString()).update({
      'plant.height': newHeight,
      'plant.health': newHealth,
      'plant.lastWatered': now,
      'plant.waterCount': admin.firestore.FieldValue.increment(1),
      'totalGrowth': admin.firestore.FieldValue.increment(growth)
    });
    
    return { 
      success: true, 
      growth: growth, 
      newHeight: newHeight,
      newHealth: newHealth
    };
  } catch (error) {
    console.error('Water plant error:', error);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' };
  }
}

async function feedPlant(userId) {
  const user = await getUser(userId);
  if (!user) return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!' };

  const now = admin.firestore.Timestamp.now();
  const lastFed = user.plant.lastFed.toDate();
  const timeDiff = (now.toDate() - lastFed) / (1000 * 60 * 60);

  if (timeDiff < 6) {
    const hoursLeft = Math.ceil(6 - timeDiff);
    return { 
      success: false, 
      message: `üö´ –†–∞—Å—Ç–µ–Ω–∏–µ —Å—ã—Ç–æ! –°–ª–µ–¥—É—é—â–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞ —á–µ—Ä–µ–∑ ${hoursLeft} —á.` 
    };
  }

  const growth = Math.floor(Math.random() * 4) + 2;
  const newHeight = user.plant.height + growth;
  const newHealth = Math.min(100, user.plant.health + 20);

  try {
    await db.collection('users').doc(userId.toString()).update({
      'plant.height': newHeight,
      'plant.health': newHealth,
      'plant.lastFed': now,
      'plant.feedCount': admin.firestore.FieldValue.increment(1),
      'totalGrowth': admin.firestore.FieldValue.increment(growth)
    });
    
    return { 
      success: true, 
      growth: growth, 
      newHeight: newHeight,
      newHealth: newHealth
    };
  } catch (error) {
    console.error('Feed plant error:', error);
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' };
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
bot.onText(/\/start/, async (msg) => {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start ...
});

bot.on('callback_query', async (query) => {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback_query ...
});

// –ú–µ—Ö–∞–Ω–∏–∑–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
let isBotRunning = false;

function startBot() {
  if (isBotRunning) return;
  
  try {
    bot.startPolling();
    isBotRunning = true;
    console.log('‚úÖ –ë–æ—Ç –Ω–∞—á–∞–ª polling');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    setTimeout(startBot, 5000);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit();
});

process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
  bot.stopPolling();
  process.exit();
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞—Å—Ç–µ–Ω–∏–π
setInterval(async () => {
  try {
    const now = admin.firestore.Timestamp.now();
    const twelveHoursAgo = new Date(now.toDate().getTime() - 12 * 60 * 60 * 1000);
    
    const snapshot = await db.collection('users').get();
    
    snapshot.forEach(async (doc) => {
      const user = doc.data();
      const lastCare = Math.max(
        user.plant.lastWatered.toDate().getTime(),
        user.plant.lastFed.toDate().getTime()
      );
      
      if (lastCare < twelveHoursAgo.getTime() && user.plant.health > 20) {
        await updateUser(doc.id, {
          'plant.health': Math.max(20, user.plant.health - 10)
        });
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞—Å—Ç–µ–Ω–∏–π:', error);
  }
}, 12 * 60 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('‚ùå Polling error:', error);
  isBotRunning = false;
  setTimeout(startBot, 5000);
});

bot.on('error', (error) => {
  console.error('‚ùå Bot error:', error);
});

console.log('üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
