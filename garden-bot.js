const TelegramBot = require('8327094310:AAHv5qAx4mUJkIuL6USLdJPkqMGhr1AoiXg');
const admin = require('firebase-admin');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const serviceAccount = require('./firebase-service-account.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
const db = admin.firestore();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const PLANT_STAGES = {
  SEED: { name: '–°–µ–º–µ—á–∫–æ', emoji: 'üå±', minHeight: 0 },
  SPROUT: { name: '–†–æ—Å—Ç–æ–∫', emoji: 'üåø', minHeight: 5 },
  YOUNG: { name: '–ú–æ–ª–æ–¥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', emoji: 'ü™¥', minHeight: 15 },
  MATURE: { name: '–í–∑—Ä–æ—Å–ª–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', emoji: 'üå≥', minHeight: 30 },
  BLOOMING: { name: '–¶–≤–µ—Ç—É—â–µ–µ', emoji: 'üå∏', minHeight: 50 }
};

const PLANT_VARIETIES = [
  '–°–µ–≤–µ—Ä–Ω–æ–µ —Å–∏—è–Ω–∏–µ', '–ó–æ–ª–æ—Ç–æ–π –ª–∏—Å—Ç', '–ó–µ–ª–µ–Ω—ã–π –¥—Ä–∞–∫–æ–Ω', '–õ—É–Ω–Ω–∞—è –ø—ã–ª—å',
  '–ò–∑—É–º—Ä—É–¥–Ω–∞—è –º–µ—á—Ç–∞', '–°–æ–ª–Ω–µ—á–Ω—ã–π –ª—É—á', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç—É–º–∞–Ω', '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∞–¥',
  '–î–∏–∫–∞—è –ø—Ä–∏—Ä–æ–¥–∞', '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–µ—Å', '–†–∞–¥—É–∂–Ω—ã–π —Ü–≤–µ—Ç', '–ù–µ–±–µ—Å–Ω–∞—è –≤—ã—Å–æ—Ç–∞'
];

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
const mainKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üå± –ú–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ', callback_data: 'my_plant' }],
      [{ text: 'üíß –ü–æ–ª–∏—Ç—å', callback_data: 'water' }, { text: 'üåø –ü–æ–¥–∫–æ—Ä–º–∏—Ç—å', callback_data: 'feed' }],
      [{ text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞', callback_data: 'leaderboard' }],
      [{ text: 'üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' }, { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è
function getPlantStage(height) {
  if (height >= PLANT_STAGES.BLOOMING.minHeight) return PLANT_STAGES.BLOOMING;
  if (height >= PLANT_STAGES.MATURE.minHeight) return PLANT_STAGES.MATURE;
  if (height >= PLANT_STAGES.YOUNG.minHeight) return PLANT_STAGES.YOUNG;
  if (height >= PLANT_STAGES.SPROUT.minHeight) return PLANT_STAGES.SPROUT;
  return PLANT_STAGES.SEED;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(userId, username, chatId) {
  const variety = PLANT_VARIETIES[Math.floor(Math.random() * PLANT_VARIETIES.length)];
  const userData = {
    username: username || `–°–∞–¥–æ–≤–æ–¥${userId}`,
    joinDate: admin.firestore.Timestamp.now(),
    chatId: chatId,
    plant: {
      variety: variety,
      height: 1,
      health: 100,
      lastWatered: admin.firestore.Timestamp.now(),
      lastFed: admin.firestore.Timestamp.now(),
      plantedDate: admin.firestore.Timestamp.now(),
      waterCount: 0,
      feedCount: 0
    },
    totalGrowth: 0,
    achievements: []
  };

  await db.collection('users').doc(userId.toString()).set(userData);
  return userData;
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUser(userId) {
  const userDoc = await db.collection('users').doc(userId.toString()).get();
  return userDoc.exists ? userDoc.data() : null;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUser(userId, data) {
  await db.collection('users').doc(userId.toString()).update(data);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è
async function waterPlant(userId) {
  const user = await getUser(userId);
  if (!user) return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!' };

  const now = admin.firestore.Timestamp.now();
  const lastWatered = user.plant.lastWatered.toDate();
  const timeDiff = (now.toDate() - lastWatered) / (1000 * 60 * 60); // —á–∞—Å—ã

  if (timeDiff < 4) {
    const hoursLeft = Math.ceil(4 - timeDiff);
    return { 
      success: false, 
      message: `üö´ –†–∞—Å—Ç–µ–Ω–∏–µ —É–∂–µ –ø–æ–ª–∏—Ç–æ! –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤ —á–µ—Ä–µ–∑ ${hoursLeft} —á.` 
    };
  }

  // –†–æ—Å—Ç –æ—Ç –ø–æ–ª–∏–≤–∞
  const growth = Math.floor(Math.random() * 3) + 1; // 1-3 —Å–º
  const newHeight = user.plant.height + growth;
  const newHealth = Math.min(100, user.plant.health + 10);

  await updateUser(userId, {
    'plant.height': newHeight,
    'plant.health': newHealth,
    'plant.lastWatered': now,
    'plant.waterCount': user.plant.waterCount + 1,
    totalGrowth: user.totalGrowth + growth
  });

  return { 
    success: true, 
    growth: growth, 
    newHeight: newHeight,
    newHealth: newHealth
  };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–æ—Ä–º–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è
async function feedPlant(userId) {
  const user = await getUser(userId);
  if (!user) return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!' };

  const now = admin.firestore.Timestamp.now();
  const lastFed = user.plant.lastFed.toDate();
  const timeDiff = (now.toDate() - lastFed) / (1000 * 60 * 60); // —á–∞—Å—ã

  if (timeDiff < 6) {
    const hoursLeft = Math.ceil(6 - timeDiff);
    return { 
      success: false, 
      message: `üö´ –†–∞—Å—Ç–µ–Ω–∏–µ —Å—ã—Ç–æ! –°–ª–µ–¥—É—é—â–∞—è –ø–æ–¥–∫–æ—Ä–º–∫–∞ —á–µ—Ä–µ–∑ ${hoursLeft} —á.` 
    };
  }

  // –†–æ—Å—Ç –æ—Ç –ø–æ–¥–∫–æ—Ä–º–∫–∏
  const growth = Math.floor(Math.random() * 4) + 2; // 2-5 —Å–º
  const newHeight = user.plant.height + growth;
  const newHealth = Math.min(100, user.plant.health + 20);

  await updateUser(userId, {
    'plant.height': newHeight,
    'plant.health': newHealth,
    'plant.lastFed': now,
    'plant.feedCount': user.plant.feedCount + 1,
    totalGrowth: user.totalGrowth + growth
  });

  return { 
    success: true, 
    growth: growth, 
    newHeight: newHeight,
    newHealth: newHealth
  };
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–∞—Ç–∞
async function getChatLeaderboard(chatId) {
  const snapshot = await db.collection('users')
    .where('chatId', '==', chatId)
    .orderBy('plant.height', 'desc')
    .limit(10)
    .get();

  const leaderboard = [];
  snapshot.forEach(doc => {
    const data = doc.data();
    leaderboard.push({
      username: data.username,
      variety: data.plant.variety,
      height: data.plant.height,
      stage: getPlantStage(data.plant.height)
    });
  });

  return leaderboard;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name;

  let user = await getUser(userId);
  
  if (!user) {
    user = await createUser(userId, username, chatId);
    const stage = getPlantStage(user.plant.height);
    
    bot.sendMessage(chatId, 
      `üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥!\n\n` +
      `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–º–µ—á–∫–æ —Å–æ—Ä—Ç–∞ "${user.plant.variety}"!\n` +
      `${stage.emoji} –¢–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: ${user.plant.height} —Å–º\n\n` +
      `–£—Ö–∞–∂–∏–≤–∞–π—Ç–µ –∑–∞ —Å–≤–æ–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!`,
      mainKeyboard
    );
  } else {
    const stage = getPlantStage(user.plant.height);
    bot.sendMessage(chatId,
      `üåø –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ —Å–∞–¥!\n\n` +
      `${stage.emoji} –í–∞—à "${user.plant.variety}": ${user.plant.height} —Å–º\n` +
      `üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${user.plant.health}%`,
      mainKeyboard
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  let user = await getUser(userId);
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å
  if (!user && data !== 'help') {
    bot.answerCallbackQuery(query.id, { text: '–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã!' });
    return;
  }

  switch (data) {
    case 'my_plant':
      const stage = getPlantStage(user.plant.height);
      const plantedDays = Math.floor((Date.now() - user.plant.plantedDate.toDate()) / (1000 * 60 * 60 * 24));
      
      bot.editMessageText(
        `üåø –í–∞—à–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: "${user.plant.variety}"\n\n` +
        `${stage.emoji} –°—Ç–∞–¥–∏—è: ${stage.name}\n` +
        `üìè –í—ã—Å–æ—Ç–∞: ${user.plant.height} —Å–º\n` +
        `üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${user.plant.health}%\n` +
        `üìÖ –î–Ω–µ–π —Å –ø–æ—Å–∞–¥–∫–∏: ${plantedDays}\n` +
        `üíß –ü–æ–ª–∏–≤–æ–≤: ${user.plant.waterCount}\n` +
        `üåø –ü–æ–¥–∫–æ—Ä–º–æ–∫: ${user.plant.feedCount}`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
          }
        }
      );
      break;

    case 'water':
      const waterResult = await waterPlant(userId);
      if (waterResult.success) {
        const newStage = getPlantStage(waterResult.newHeight);
        bot.answerCallbackQuery(query.id, { 
          text: `üíß –ü–æ–ª–∏–≤ –∑–∞–≤–µ—Ä—à–µ–Ω! +${waterResult.growth} —Å–º`, 
          show_alert: true 
        });
        
        bot.editMessageText(
          `üíß –†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–æ!\n\n` +
          `${newStage.emoji} "${user.plant.variety}" –≤—ã—Ä–æ—Å–ª–æ –Ω–∞ ${waterResult.growth} —Å–º\n` +
          `üìè –ù–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞: ${waterResult.newHeight} —Å–º\n` +
          `üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${waterResult.newHealth}%`,
          {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
            }
          }
        );
      } else {
        bot.answerCallbackQuery(query.id, { text: waterResult.message, show_alert: true });
      }
      break;

    case 'feed':
      const feedResult = await feedPlant(userId);
      if (feedResult.success) {
        const newStage = getPlantStage(feedResult.newHeight);
        bot.answerCallbackQuery(query.id, { 
          text: `üåø –ü–æ–¥–∫–æ—Ä–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! +${feedResult.growth} —Å–º`, 
          show_alert: true 
        });
        
        bot.editMessageText(
          `üåø –†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–¥–∫–æ—Ä–º–ª–µ–Ω–æ!\n\n` +
          `${newStage.emoji} "${user.plant.variety}" –≤—ã—Ä–æ—Å–ª–æ –Ω–∞ ${feedResult.growth} —Å–º\n` +
          `üìè –ù–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞: ${feedResult.newHeight} —Å–º\n` +
          `üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${feedResult.newHealth}%`,
          {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
            }
          }
        );
      } else {
        bot.answerCallbackQuery(query.id, { text: feedResult.message, show_alert: true });
      }
      break;

    case 'leaderboard':
      const leaderboard = await getChatLeaderboard(chatId);
      let leaderText = 'üèÜ –†–µ–π—Ç–∏–Ω–≥ —á–∞—Ç–∞:\n\n';
      
      if (leaderboard.length === 0) {
        leaderText += '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Ä–∞—â–∏–≤–∞–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ.';
      } else {
        leaderboard.forEach((player, index) => {
          const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
          leaderText += `${medal} ${player.username}\n`;
          leaderText += `   ${player.stage.emoji} "${player.variety}" - ${player.height} —Å–º\n\n`;
        });
      }
      
      bot.editMessageText(leaderText, {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
        }
      });
      break;

    case 'achievements':
      bot.editMessageText(
        `üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n` +
        `üå± –ü–µ—Ä–≤—ã–π —Ä–æ—Å—Ç–æ–∫ - –ø–æ—Å–∞–¥–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ\n` +
        `üíß –ó–∞–±–æ—Ç–ª–∏–≤—ã–π —Å–∞–¥–æ–≤–æ–¥ - 10 –ø–æ–ª–∏–≤–æ–≤\n` +
        `üåø –ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∫–æ—Ä–º–∫–∏ - 10 –ø–æ–¥–∫–æ—Ä–º–æ–∫\n` +
        `üìè –í—ã—Å–æ—Ç–∫–∞ - —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤—ã—à–µ 25 —Å–º\n` +
        `üå≥ –ì–∏–≥–∞–Ω—Ç - —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤—ã—à–µ 50 —Å–º\n` +
        `üèÜ –ß–µ–º–ø–∏–æ–Ω —á–∞—Ç–∞ - 1 –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ\n\n` +
        `–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n` +
        `üíß –ü–æ–ª–∏–≤–æ–≤: ${user.plant.waterCount}\n` +
        `üåø –ü–æ–¥–∫–æ—Ä–º–æ–∫: ${user.plant.feedCount}\n` +
        `üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞: ${user.plant.height} —Å–º`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
          }
        }
      );
      break;

    case 'help':
      bot.editMessageText(
        `‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:\n\n` +
        `üå± –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —Å–µ–º–µ—á–∫–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞\n` +
        `üíß –ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞\n` +
        `üåø –ü–æ–¥–∫–∞—Ä–º–ª–∏–≤–∞–π—Ç–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n` +
        `üìè –†–∞—Å—Ç–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è\n` +
        `üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏ –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ\n\n` +
        `–°—Ç–∞–¥–∏–∏ —Ä–æ—Å—Ç–∞:\n` +
        `üå± –°–µ–º–µ—á–∫–æ (0-4 —Å–º)\n` +
        `üåø –†–æ—Å—Ç–æ–∫ (5-14 —Å–º)\n` +
        `ü™¥ –ú–æ–ª–æ–¥–æ–µ (15-29 —Å–º)\n` +
        `üå≥ –í–∑—Ä–æ—Å–ª–æ–µ (30-49 —Å–º)\n` +
        `üå∏ –¶–≤–µ—Ç—É—â–µ–µ (50+ —Å–º)`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back' }]]
          }
        }
      );
      break;

    case 'back':
      const currentStage = getPlantStage(user.plant.height);
      bot.editMessageText(
        `üåø –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–∞–¥\n\n` +
        `${currentStage.emoji} –í–∞—à "${user.plant.variety}": ${user.plant.height} —Å–º\n` +
        `üíö –ó–¥–æ—Ä–æ–≤—å–µ: ${user.plant.health}%\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          ...mainKeyboard
        }
      );
      break;
  }

  bot.answerCallbackQuery(query.id);
});

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
setInterval(async () => {
  const now = admin.firestore.Timestamp.now();
  const twelveHoursAgo = new Date(now.toDate().getTime() - 12 * 60 * 60 * 1000);
  
  const snapshot = await db.collection('users').get();
  
  snapshot.forEach(async (doc) => {
    const user = doc.data();
    const lastCare = Math.max(
      user.plant.lastWatered.toDate().getTime(),
      user.plant.lastFed.toDate().getTime()
    );
    
    if (lastCare < twelveHoursAgo.getTime() && user.plant.health > 20) {
      await updateUser(doc.id, {
        'plant.health': Math.max(20, user.plant.health - 10)
      });
    }
  });
}, 12 * 60 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤

console.log('ü§ñ Garden Bot –∑–∞–ø—É—â–µ–Ω!');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.log('Polling error:', error);
});

process.on('unhandledRejection', (reason) => {
  console.log('Unhandled Rejection:', reason);
});

module.exports = bot;